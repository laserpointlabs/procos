
# Project Code Quality & Security Standards

## When to Use This Rule

This rule applies when working with:
- **TypeScript/JavaScript** files (`.ts`, `.tsx`, `.js`, `.jsx`)
- **Configuration files** (`.json`, `.yml`, `.yaml`)
- **Package management** (`package.json`, `package-lock.json`)
- **Environment files** (`.env*`)
- **Docker files** (`Dockerfile*`)

## Code Quality Standards

### **TypeScript/JavaScript Standards**

#### **Type Safety (TypeScript)**
```typescript
// ✅ GOOD: Strict typing
interface UserRequest {
  id: string;
  email: string;
  name: string;
}

async function getUser(id: string): Promise<UserRequest | null> {
  // Implementation with proper error handling
}

// ❌ BAD: Any types or loose typing
function getUser(id: any): any {
  // No type safety
}
```

#### **Error Handling Patterns**
```typescript
// ✅ GOOD: Comprehensive error handling
try {
  const result = await externalService.call();
  return { success: true, data: result };
} catch (error) {
  logger.error('Service call failed', { error: error.message, context });
  throw new ServiceError('External service unavailable', error);
}

// ❌ BAD: Silent failures or generic catches
try {
  await externalService.call();
} catch (e) {
  console.log('Error'); // No context, poor logging
}
```

#### **Async/Await Best Practices**
```typescript
// ✅ GOOD: Proper async patterns
async function processItems(items: Item[]): Promise<ProcessResult[]> {
  const results = await Promise.allSettled(
    items.map(item => processItem(item))
  );
  
  return results.map((result, index) => {
    if (result.status === 'fulfilled') {
      return { success: true, data: result.value, item: items[index] };
    } else {
      logger.warn('Item processing failed', { 
        item: items[index], 
        error: result.reason 
      });
      return { success: false, error: result.reason, item: items[index] };
    }
  });
}

// ❌ BAD: Blocking operations or unhandled promises
function processItems(items: Item[]) {
  items.forEach(async (item) => { // Don't use async in forEach
    await processItem(item); // Unhandled errors
  });
}
```

### **React Component Standards**

#### **Component Structure**
```tsx
// ✅ GOOD: Well-structured component
interface ProjectCardProps {
  project: Project;
  onEdit?: (project: Project) => void;
  className?: string;
}

export const ProjectCard: React.FC<ProjectCardProps> = ({
  project,
  onEdit,
  className
}) => {
  const [isLoading, setIsLoading] = useState(false);
  
  const handleEdit = useCallback(async () => {
    setIsLoading(true);
    try {
      await onEdit?.(project);
    } catch (error) {
      console.error('Edit failed:', error);
    } finally {
      setIsLoading(false);
    }
  }, [project, onEdit]);

  return (
    <div className={cn('project-card', className)}>
      <h3>{project.name}</h3>
      <p>{project.description}</p>
      {onEdit && (
        <button 
          onClick={handleEdit}
          disabled={isLoading}
        >
          {isLoading ? 'Editing...' : 'Edit'}
        </button>
      )}
    </div>
  );
};
```

#### **Custom Hooks**
```tsx
// ✅ GOOD: Reusable custom hook
export const useProject = (projectId: string) => {
  const [project, setProject] = useState<Project | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchProject = async () => {
      try {
        setLoading(true);
        const data = await api.getProject(projectId);
        setProject(data);
      } catch (err) {
        setError(err instanceof Error ? err.message : 'Failed to fetch project');
      } finally {
        setLoading(false);
      }
    };

    fetchProject();
  }, [projectId]);

  return { project, loading, error };
};
```

### **Security Standards**

#### **Input Validation**
```typescript
// ✅ GOOD: Comprehensive input validation
import { z } from 'zod';

const UserSchema = z.object({
  email: z.string().email(),
  password: z.string().min(8).regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/),
  name: z.string().min(1).max(100)
});

async function createUser(input: unknown) {
  const validatedInput = UserSchema.parse(input);
  // Process validated input
}

// ❌ BAD: No validation
async function createUser(input: any) {
  // Process unvalidated input
}
```

#### **Environment Variables**
```typescript
// ✅ GOOD: Validated environment configuration
import { z } from 'zod';

const envSchema = z.object({
  DATABASE_URL: z.string().url(),
  JWT_SECRET: z.string().min(32),
  API_KEY: z.string().min(1)
});

const env = envSchema.parse(process.env);

// ❌ BAD: Direct access without validation
const dbUrl = process.env.DATABASE_URL; // Could be undefined
```

#### **SQL Injection Prevention**
```typescript
// ✅ GOOD: Parameterized queries
async function getUserById(id: string) {
  const query = 'SELECT * FROM users WHERE id = $1';
  const result = await db.query(query, [id]);
  return result.rows[0];
}

// ❌ BAD: String concatenation (SQL injection risk)
async function getUserById(id: string) {
  const query = `SELECT * FROM users WHERE id = '${id}'`;
  const result = await db.query(query);
  return result.rows[0];
}
```

### **Performance Standards**

#### **Database Query Optimization**
```typescript
// ✅ GOOD: Optimized queries with proper indexing
async function getProjectsByUser(userId: string) {
  const query = `
    SELECT p.*, u.name as owner_name 
    FROM projects p 
    JOIN users u ON p.owner_id = u.id 
    WHERE p.owner_id = $1 
    ORDER BY p.created_at DESC
  `;
  
  const result = await db.query(query, [userId]);
  return result.rows;
}

// ❌ BAD: N+1 query problem
async function getProjectsByUser(userId: string) {
  const projects = await db.query('SELECT * FROM projects WHERE owner_id = $1', [userId]);
  
  for (const project of projects.rows) {
    const user = await db.query('SELECT name FROM users WHERE id = $1', [project.owner_id]);
    project.owner_name = user.rows[0].name;
  }
  
  return projects.rows;
}
```

#### **Caching Strategies**
```typescript
// ✅ GOOD: Intelligent caching
class ProjectCache {
  private cache = new Map<string, { data: Project; timestamp: number }>();
  private readonly TTL = 5 * 60 * 1000; // 5 minutes

  async getProject(id: string): Promise<Project | null> {
    const cached = this.cache.get(id);
    
    if (cached && Date.now() - cached.timestamp < this.TTL) {
      return cached.data;
    }

    const project = await this.fetchProjectFromDB(id);
    if (project) {
      this.cache.set(id, { data: project, timestamp: Date.now() });
    }
    
    return project;
  }
}
```

### **Testing Standards**

#### **Unit Tests**
```typescript
// ✅ GOOD: Comprehensive unit tests
import { render, screen, fireEvent } from '@testing-library/react';
import { ProjectCard } from './ProjectCard';

describe('ProjectCard', () => {
  const mockProject = {
    id: '1',
    name: 'Test Project',
    description: 'A test project'
  };

  it('renders project information correctly', () => {
    render(<ProjectCard project={mockProject} />);
    
    expect(screen.getByText('Test Project')).toBeInTheDocument();
    expect(screen.getByText('A test project')).toBeInTheDocument();
  });

  it('calls onEdit when edit button is clicked', () => {
    const mockOnEdit = jest.fn();
    render(<ProjectCard project={mockProject} onEdit={mockOnEdit} />);
    
    fireEvent.click(screen.getByText('Edit'));
    
    expect(mockOnEdit).toHaveBeenCalledWith(mockProject);
  });
});
```

#### **Integration Tests**
```typescript
// ✅ GOOD: API integration tests
describe('Project API', () => {
  it('creates a new project successfully', async () => {
    const projectData = {
      name: 'New Project',
      description: 'A new test project'
    };

    const response = await request(app)
      .post('/api/projects')
      .send(projectData)
      .expect(201);

    expect(response.body).toMatchObject({
      id: expect.any(String),
      name: projectData.name,
      description: projectData.description
    });
  });
});
```

### **Documentation Standards**

#### **JSDoc Comments**
```typescript
/**
 * Fetches a project by its unique identifier
 * @param id - The unique identifier of the project
 * @param options - Optional configuration for the request
 * @returns Promise resolving to the project or null if not found
 * @throws {ValidationError} When the ID format is invalid
 * @throws {DatabaseError} When database connection fails
 */
async function getProject(
  id: string, 
  options?: { includeOwner?: boolean }
): Promise<Project | null> {
  // Implementation
}
```

#### **README Documentation**
```markdown
# Project Service

## Overview
Handles project-related operations including CRUD operations and project management.

## API Endpoints

### GET /api/projects
Retrieves a list of projects with optional filtering.

**Query Parameters:**
- `owner` (string): Filter by owner ID
- `status` (string): Filter by project status
- `limit` (number): Maximum number of results (default: 20)

**Response:**
```json
{
  "projects": [...],
  "total": 100,
  "page": 1
}
```

## Development

### Setup
```bash
npm install
npm run dev
```

### Testing
```bash
npm test
npm run test:coverage
```
```

### **Code Review Checklist**

#### **Before Submitting Code:**
- [ ] All tests pass locally
- [ ] Code follows TypeScript strict mode
- [ ] No console.log statements in production code
- [ ] Error handling is comprehensive
- [ ] Input validation is implemented
- [ ] Security best practices are followed
- [ ] Performance considerations are addressed
- [ ] Documentation is updated
- [ ] No hardcoded secrets or sensitive data

#### **During Code Review:**
- [ ] Code is readable and maintainable
- [ ] Functions have single responsibility
- [ ] Proper error boundaries are in place
- [ ] Database queries are optimized
- [ ] Caching is implemented where appropriate
- [ ] Security vulnerabilities are addressed
- [ ] Performance impact is considered

---

**These standards ensure high-quality, secure, and maintainable code across the entire project.**
- **Documentation** updated for public APIs

---

**These standards ensure DADMS maintains high code quality, security, and performance across all development work.**