
# Project Development Context Memory

## Automatic Context for Development Files

When working on project development files, automatically:

1. **Retrieve relevant memories** about the specific service or component
2. **Apply established patterns** from previous implementations  
3. **Follow architectural decisions** stored in memory
4. **Consider related service integrations** and dependencies

## Service-Specific Context

### Backend Services (`services/*`)
- Port allocations and service configurations
- API patterns and authentication methods
- Database connection patterns
- Inter-service communication protocols

### Frontend Development (`ui/*`)
- Component architecture and patterns
- Theme system and styling approaches
- State management decisions
- API integration patterns

### Infrastructure (`infrastructure/*`)
- Container configurations and port mappings
- Service dependencies and startup order
- Volume mounts and data persistence
- Environment variables and secrets

### Cursor Configuration (`.cursor/*`)
- Rule organization and best practices
- MCP server configurations
- Memory management patterns

This ensures development context is automatically enhanced with project memory.
- Rule organization and best practices
- MCP server configurations
- Memory management patterns

This ensures development context is automatically enhanced with project memory.