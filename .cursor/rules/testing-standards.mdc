---
description: Comprehensive testing standards and CI/CD practices for DADMS including unit tests, integration tests, E2E tests, and deployment validation.
globs: **/*.test.ts, **/*.test.tsx, **/*.spec.ts, **/*.spec.tsx, tests/**, cypress/**, jest.config.js, *.test.js, package.json
alwaysApply: false
---

# DADMS Testing & CI/CD Standards

## When to Use This Rule

This rule applies when working with:
- **Test files** (`.test.ts`, `.test.tsx`, `.spec.ts`, `.spec.tsx`)
- **Test directories** (`tests/`, `__tests__/`, `cypress/`)
- **Test configuration** (`jest.config.js`, `cypress.config.js`)
- **CI/CD pipelines** (GitHub Actions, package.json scripts)

## Testing Pyramid Standards

### **Unit Tests (70% of test coverage)**

#### **Service Layer Testing**
```typescript
// ✅ GOOD: Comprehensive service testing
import { ProjectService } from '../src/services/ProjectService';
import { MockDatabase } from './mocks/MockDatabase';

describe('ProjectService', () => {
  let projectService: ProjectService;
  let mockDb: MockDatabase;

  beforeEach(() => {
    mockDb = new MockDatabase();
    projectService = new ProjectService(mockDb);
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  describe('createProject', () => {
    it('should create project with valid data', async () => {
      // Arrange
      const projectData = {
        name: 'Test Project',
        description: 'A test project',
        userId: 'user-123'
      };
      const expectedProject = { id: 'proj-456', ...projectData };
      mockDb.projects.create.mockResolvedValue(expectedProject);

      // Act
      const result = await projectService.createProject(projectData);

      // Assert
      expect(result).toEqual(expectedProject);
      expect(mockDb.projects.create).toHaveBeenCalledWith(projectData);
      expect(mockDb.projects.create).toHaveBeenCalledTimes(1);
    });

    it('should throw error for duplicate project name', async () => {
      // Arrange
      const projectData = { name: 'Existing Project', userId: 'user-123' };
      mockDb.projects.create.mockRejectedValue(new Error('Duplicate project name'));

      // Act & Assert
      await expect(projectService.createProject(projectData))
        .rejects.toThrow('Duplicate project name');
    });

    it('should validate required fields', async () => {
      // Arrange
      const invalidData = { description: 'Missing name' };

      // Act & Assert
      await expect(projectService.createProject(invalidData as any))
        .rejects.toThrow('Project name is required');
    });
  });
});

// ❌ BAD: Poor test structure
test('project stuff', async () => {
  const service = new ProjectService();
  const result = await service.createProject({ name: 'test' });
  expect(result).toBeDefined();
});
```

#### **React Component Testing**
```tsx
// ✅ GOOD: Comprehensive component testing
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { ProjectCard } from '../src/components/ProjectCard';
import { ThemeProvider } from '../src/contexts/ThemeContext';

const mockProject = {
  id: 'proj-123',
  name: 'Test Project',
  description: 'A test project description',
  status: 'active' as const,
  createdAt: new Date('2023-01-01'),
  updatedAt: new Date('2023-01-01')
};

const renderWithTheme = (component: React.ReactElement) => {
  return render(
    <ThemeProvider>
      {component}
    </ThemeProvider>
  );
};

describe('ProjectCard', () => {
  it('should render project information correctly', () => {
    // Arrange & Act
    renderWithTheme(<ProjectCard project={mockProject} />);

    // Assert
    expect(screen.getByText('Test Project')).toBeInTheDocument();
    expect(screen.getByText('A test project description')).toBeInTheDocument();
    expect(screen.getByText('active')).toBeInTheDocument();
  });

  it('should call onEdit when edit button is clicked', async () => {
    // Arrange
    const mockOnEdit = jest.fn();
    renderWithTheme(
      <ProjectCard project={mockProject} onEdit={mockOnEdit} />
    );

    // Act
    fireEvent.click(screen.getByRole('button', { name: /edit project/i }));

    // Assert
    await waitFor(() => {
      expect(mockOnEdit).toHaveBeenCalledWith(mockProject);
      expect(mockOnEdit).toHaveBeenCalledTimes(1);
    });
  });

  it('should not show edit button when onEdit is not provided', () => {
    // Arrange & Act
    renderWithTheme(<ProjectCard project={mockProject} />);

    // Assert
    expect(screen.queryByRole('button', { name: /edit project/i }))
      .not.toBeInTheDocument();
  });

  it('should apply custom className', () => {
    // Arrange & Act
    renderWithTheme(
      <ProjectCard project={mockProject} className="custom-class" />
    );

    // Assert
    expect(screen.getByTestId('project-card'))
      .toHaveClass('project-card', 'custom-class');
  });
});

// ❌ BAD: Minimal testing
test('ProjectCard renders', () => {
  render(<ProjectCard project={mockProject} />);
  expect(screen.getByText('Test Project')).toBeTruthy();
});
```

### **Integration Tests (20% of test coverage)**

#### **API Endpoint Testing**
```typescript
// ✅ GOOD: Complete API integration testing
import request from 'supertest';
import { app } from '../src/app';
import { setupTestDatabase, cleanupTestDatabase } from './helpers/database';
import { createTestUser, createAuthToken } from './helpers/auth';

describe('Projects API', () => {
  let authToken: string;
  let userId: string;

  beforeAll(async () => {
    await setupTestDatabase();
  });

  afterAll(async () => {
    await cleanupTestDatabase();
  });

  beforeEach(async () => {
    const user = await createTestUser();
    userId = user.id;
    authToken = createAuthToken(user);
  });

  describe('POST /api/projects', () => {
    it('should create a new project', async () => {
      // Arrange
      const projectData = {
        name: 'Integration Test Project',
        description: 'Created via integration test'
      };

      // Act
      const response = await request(app)
        .post('/api/projects')
        .set('Authorization', `Bearer ${authToken}`)
        .send(projectData)
        .expect(201);

      // Assert
      expect(response.body).toMatchObject({
        success: true,
        data: {
          id: expect.any(String),
          name: projectData.name,
          description: projectData.description,
          userId: userId,
          status: 'draft',
          createdAt: expect.any(String),
          updatedAt: expect.any(String)
        }
      });

      // Verify in database
      const project = await db.projects.findById(response.body.data.id);
      expect(project).toBeTruthy();
      expect(project.name).toBe(projectData.name);
    });

    it('should return 400 for invalid input', async () => {
      // Arrange
      const invalidData = { description: 'Missing name' };

      // Act
      const response = await request(app)
        .post('/api/projects')
        .set('Authorization', `Bearer ${authToken}`)
        .send(invalidData)
        .expect(400);

      // Assert
      expect(response.body).toMatchObject({
        error: 'Invalid input',
        details: expect.arrayContaining([
          expect.objectContaining({ path: ['name'] })
        ])
      });
    });

    it('should return 401 for unauthenticated requests', async () => {
      // Arrange
      const projectData = { name: 'Test Project' };

      // Act & Assert
      await request(app)
        .post('/api/projects')
        .send(projectData)
        .expect(401);
    });
  });

  describe('GET /api/projects', () => {
    it('should return user projects with pagination', async () => {
      // Arrange - Create test projects
      const projects = await Promise.all([
        createTestProject(userId, 'Project 1'),
        createTestProject(userId, 'Project 2'),
        createTestProject(userId, 'Project 3')
      ]);

      // Act
      const response = await request(app)
        .get('/api/projects?limit=2&offset=0')
        .set('Authorization', `Bearer ${authToken}`)
        .expect(200);

      // Assert
      expect(response.body).toMatchObject({
        success: true,
        data: expect.arrayContaining([
          expect.objectContaining({ name: 'Project 3' }),
          expect.objectContaining({ name: 'Project 2' })
        ]),
        pagination: {
          total: 3,
          limit: 2,
          offset: 0,
          hasMore: true
        }
      });
    });
  });
});

// ❌ BAD: Shallow integration testing
describe('API tests', () => {
  test('POST /projects works', async () => {
    const response = await request(app).post('/projects').send({});
    expect(response.status).not.toBe(500);
  });
});
```

#### **Database Integration Testing**
```typescript
// ✅ GOOD: Database integration testing
import { DatabaseService } from '../src/services/DatabaseService';
import { setupTestDatabase, cleanupTestDatabase } from './helpers/database';

describe('DatabaseService Integration', () => {
  let dbService: DatabaseService;

  beforeAll(async () => {
    await setupTestDatabase();
    dbService = new DatabaseService();
  });

  afterAll(async () => {
    await cleanupTestDatabase();
  });

  describe('Transaction handling', () => {
    it('should rollback transaction on error', async () => {
      // Arrange
      const userId = await createTestUser();
      const initialProjectCount = await dbService.projects.count(userId);

      // Act - Simulate error during transaction
      await expect(
        dbService.withTransaction(async (tx) => {
          await tx.projects.create({ name: 'Test Project', userId });
          throw new Error('Simulated error');
        })
      ).rejects.toThrow('Simulated error');

      // Assert - Project should not be created
      const finalProjectCount = await dbService.projects.count(userId);
      expect(finalProjectCount).toBe(initialProjectCount);
    });

    it('should commit successful transactions', async () => {
      // Arrange
      const userId = await createTestUser();
      const initialProjectCount = await dbService.projects.count(userId);

      // Act
      const result = await dbService.withTransaction(async (tx) => {
        const project = await tx.projects.create({ 
          name: 'Test Project', 
          userId 
        });
        const task = await tx.tasks.create({ 
          name: 'Test Task', 
          projectId: project.id 
        });
        return { project, task };
      });

      // Assert
      const finalProjectCount = await dbService.projects.count(userId);
      expect(finalProjectCount).toBe(initialProjectCount + 1);
      
      const createdProject = await dbService.projects.findById(result.project.id);
      expect(createdProject).toBeTruthy();
      
      const createdTask = await dbService.tasks.findById(result.task.id);
      expect(createdTask).toBeTruthy();
    });
  });
});
```

### **End-to-End Tests (10% of test coverage)**

#### **Cypress E2E Testing**
```typescript
// ✅ GOOD: Comprehensive E2E testing
describe('Project Management Workflow', () => {
  beforeEach(() => {
    // Setup test data
    cy.task('db:seed');
    cy.login('test@example.com', 'password123');
  });

  afterEach(() => {
    cy.task('db:clean');
  });

  it('should complete full project creation workflow', () => {
    // Navigate to projects page
    cy.visit('/projects');
    cy.get('[data-testid="projects-page"]').should('be.visible');

    // Start project creation
    cy.get('[data-testid="create-project-btn"]').click();
    cy.get('[data-testid="project-form"]').should('be.visible');

    // Fill project form
    cy.get('[data-testid="project-name-input"]')
      .type('E2E Test Project');
    cy.get('[data-testid="project-description-input"]')
      .type('Created through E2E testing');
    cy.get('[data-testid="project-category-select"]')
      .select('Development');

    // Submit form
    cy.get('[data-testid="submit-project-btn"]').click();

    // Verify success
    cy.get('[data-testid="success-notification"]')
      .should('contain', 'Project created successfully');
    cy.url().should('match', /\/projects\/[a-zA-Z0-9-]+$/);

    // Verify project appears in list
    cy.visit('/projects');
    cy.get('[data-testid="project-list"]')
      .should('contain', 'E2E Test Project');

    // Test project editing
    cy.get('[data-testid="project-card-E2E Test Project"]')
      .find('[data-testid="edit-project-btn"]')
      .click();

    cy.get('[data-testid="project-name-input"]')
      .clear()
      .type('Updated E2E Project');
    cy.get('[data-testid="submit-project-btn"]').click();

    // Verify update
    cy.get('[data-testid="success-notification"]')
      .should('contain', 'Project updated successfully');
    cy.get('[data-testid="project-list"]')
      .should('contain', 'Updated E2E Project')
      .should('not.contain', 'E2E Test Project');
  });

  it('should handle project deletion correctly', () => {
    // Create project first
    cy.createProject('Project to Delete');

    // Navigate to projects and find the project
    cy.visit('/projects');
    cy.get('[data-testid="project-card-Project to Delete"]')
      .should('be.visible');

    // Delete project
    cy.get('[data-testid="project-card-Project to Delete"]')
      .find('[data-testid="delete-project-btn"]')
      .click();

    // Confirm deletion
    cy.get('[data-testid="confirm-dialog"]').should('be.visible');
    cy.get('[data-testid="confirm-delete-btn"]').click();

    // Verify deletion
    cy.get('[data-testid="success-notification"]')
      .should('contain', 'Project deleted successfully');
    cy.get('[data-testid="project-list"]')
      .should('not.contain', 'Project to Delete');
  });

  it('should maintain data consistency across page refreshes', () => {
    // Create project
    cy.createProject('Persistence Test Project');

    // Refresh page
    cy.reload();

    // Verify project still exists
    cy.get('[data-testid="project-list"]')
      .should('contain', 'Persistence Test Project');

    // Edit project
    cy.get('[data-testid="project-card-Persistence Test Project"]')
      .find('[data-testid="edit-project-btn"]')
      .click();
    
    cy.get('[data-testid="project-description-input"]')
      .clear()
      .type('Updated after refresh');
    cy.get('[data-testid="submit-project-btn"]').click();

    // Refresh again
    cy.reload();

    // Verify changes persisted
    cy.get('[data-testid="project-card-Persistence Test Project"]')
      .should('contain', 'Updated after refresh');
  });
});

// ❌ BAD: Shallow E2E testing
it('can create project', () => {
  cy.visit('/projects');
  cy.get('button').click();
  cy.get('input').type('Test');
  cy.get('form').submit();
});
```

## Testing Infrastructure

### **Test Database Setup**
```typescript
// ✅ GOOD: Proper test database isolation
import { Pool } from 'pg';
import { migrate } from '../src/database/migrate';

let testDb: Pool;

export async function setupTestDatabase(): Promise<void> {
  const testDbName = `dadms_test_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  
  // Create test database
  const adminDb = new Pool({
    connectionString: process.env.TEST_DATABASE_URL,
    database: 'postgres'
  });
  
  await adminDb.query(`CREATE DATABASE "${testDbName}"`);
  await adminDb.end();
  
  // Connect to test database
  testDb = new Pool({
    connectionString: process.env.TEST_DATABASE_URL,
    database: testDbName
  });
  
  // Run migrations
  await migrate(testDb);
  
  // Set global test database
  global.__TEST_DB__ = testDb;
  global.__TEST_DB_NAME__ = testDbName;
}

export async function cleanupTestDatabase(): Promise<void> {
  if (testDb) {
    await testDb.end();
  }
  
  if (global.__TEST_DB_NAME__) {
    const adminDb = new Pool({
      connectionString: process.env.TEST_DATABASE_URL,
      database: 'postgres'
    });
    
    await adminDb.query(`DROP DATABASE "${global.__TEST_DB_NAME__}"`);
    await adminDb.end();
  }
}
```

### **Mock Services**
```typescript
// ✅ GOOD: Comprehensive service mocking
export class MockEmailService {
  public sentEmails: Array<{
    to: string;
    subject: string;
    body: string;
    sentAt: Date;
  }> = [];

  async sendEmail(to: string, subject: string, body: string): Promise<void> {
    this.sentEmails.push({
      to,
      subject,
      body,
      sentAt: new Date()
    });
  }

  getLastEmailTo(email: string) {
    return this.sentEmails
      .filter(e => e.to === email)
      .sort((a, b) => b.sentAt.getTime() - a.sentAt.getTime())[0];
  }

  reset(): void {
    this.sentEmails = [];
  }
}

export class MockFileService {
  private files = new Map<string, Buffer>();

  async uploadFile(key: string, content: Buffer): Promise<string> {
    this.files.set(key, content);
    return `https://test-storage.com/${key}`;
  }

  async downloadFile(key: string): Promise<Buffer> {
    const file = this.files.get(key);
    if (!file) {
      throw new Error(`File not found: ${key}`);
    }
    return file;
  }

  async deleteFile(key: string): Promise<void> {
    this.files.delete(key);
  }

  reset(): void {
    this.files.clear();
  }
}
```

## CI/CD Pipeline Standards

### **GitHub Actions Workflow**
```yaml
# ✅ GOOD: Comprehensive CI/CD pipeline
name: DADMS CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '14'

jobs:
  lint-and-type-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: npm run lint
        
      - name: Run TypeScript type checking
        run: npm run type-check
        
      - name: Run Prettier check
        run: npm run format:check

  unit-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: dadms_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run unit tests
        run: npm run test:unit
        env:
          TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/dadms_test
          REDIS_URL: redis://localhost:6379
          
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info

  integration-tests:
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, unit-tests]
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: dadms_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run database migrations
        run: npm run migrate:test
        env:
          TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/dadms_test
          
      - name: Run integration tests
        run: npm run test:integration
        env:
          TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/dadms_test

  e2e-tests:
    runs-on: ubuntu-latest
    needs: [integration-tests]
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Start DADMS services
        run: |
          docker-compose -f dadms-infrastructure/docker-compose.yml up -d
          npm run start:test &
          npx wait-on http://localhost:3000
        env:
          NODE_ENV: test
          
      - name: Run E2E tests
        run: npm run test:e2e
        
      - name: Upload E2E artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-screenshots
          path: cypress/screenshots

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Run npm audit
        run: npm audit --audit-level high
        
      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          languages: javascript

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, security-scan]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      
      - name: Build Docker images
        run: |
          docker build -t dadms-ui ./dadms-ui
          docker build -t dadms-backend ./dadms-services
          
      - name: Run smoke tests
        run: |
          docker-compose -f dadms-infrastructure/docker-compose.yml up -d
          npm run test:smoke
```

### **Test Coverage Requirements**
```json
// jest.config.js
module.exports = {
  collectCoverageFrom: [
    'src/**/*.{ts,tsx}',
    '!src/**/*.d.ts',
    '!src/**/*.stories.{ts,tsx}',
    '!src/types/**/*'
  ],
  coverageThreshold: {
    global: {
      branches: 80,
      functions: 80,
      lines: 80,
      statements: 80
    },
    './src/services/': {
      branches: 90,
      functions: 90,
      lines: 90,
      statements: 90
    }
  },
  testMatch: [
    '<rootDir>/src/**/__tests__/**/*.{ts,tsx}',
    '<rootDir>/src/**/*.{test,spec}.{ts,tsx}'
  ]
};
```

## Quality Gates

### **Pre-commit Hooks**
```json
// package.json
{
  "husky": {
    "hooks": {
      "pre-commit": "lint-staged",
      "pre-push": "npm run test:unit"
    }
  },
  "lint-staged": {
    "*.{ts,tsx,js,jsx}": [
      "eslint --fix",
      "prettier --write",
      "git add"
    ],
    "*.{json,md,yml,yaml}": [
      "prettier --write",
      "git add"
    ]
  }
}
```

### **Test Execution Strategy**
- **Unit tests**: Run on every commit
- **Integration tests**: Run on pull requests and merges
- **E2E tests**: Run on main branch and release candidates
- **Performance tests**: Run nightly and before releases
- **Security scans**: Run on every pull request

---

**These testing standards ensure DADMS maintains high quality, reliability, and confidence in deployments.**