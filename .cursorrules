# procos Development Context

## ðŸš¨ MANDATORY: Branch Protection
**NEVER work directly on main branch for significant changes!**
Always create a feature branch first:
```bash
# Recommended branch naming:
git checkout -b feature/description-of-work
git checkout -b fix/issue-description
git checkout -b infra/infrastructure-change
```

## Project Overview
Building procos with clean, production-ready architecture.
This project follows industry best practices and leverages advanced development patterns.

## Architecture Standards
- **Clean Architecture**: Clear separation of concerns and boundaries
- **Modern Stack**: Latest stable versions of chosen technologies
- **Infrastructure**: Docker containers with proper orchestration
- **Testing**: Comprehensive testing at all levels

## Development Approach
- **Best practices**: Industry-standard patterns and tools
- **MVP focus**: Core functionality first, then enhancements
- **Documentation-driven**: Clear specifications guide implementation
- **Quality-first**: Code quality and maintainability prioritized

## Key Principles
- Clean architecture with clear boundaries
- Comprehensive testing at all levels
- API-first design with proper documentation
- Cloud-native deployment patterns when applicable
- Security and performance built-in from start

## Memory Integration
This project uses advanced MCP memory integration with:
- **Automatic memory storage** during development
- **Cross-project knowledge** sharing
- **Pattern recognition** and code reuse
- **Decision tracking** and architectural history
- Clean, maintainable codebase
- Full API documentation
- Comprehensive test coverage
