version: '3.8'

services:
  # Camunda Platform - The heart of ProcOS
  camunda:
    image: camunda/camunda-bpm-platform:latest
    container_name: procos-camunda
    ports:
      - "8080:8080"  # Camunda web interface and REST API
    environment:
      - DB_DRIVER=org.postgresql.Driver
      - DB_URL=jdbc:postgresql://postgres:5432/procos
      - DB_USERNAME=procos
      - DB_PASSWORD=procos123
      - WAIT_FOR_DB=postgres:5432

    volumes:
      - ./src/processes:/camunda/processes:ro  # BPMN process definitions
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/engine-rest/engine"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - procos-network

  # RabbitMQ - Message broker for worker communication
  rabbitmq:
    image: rabbitmq:3-management
    container_name: procos-rabbitmq
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=procos
      - RABBITMQ_DEFAULT_PASS=procos123
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - procos-network

  # Redis - Caching and session storage
  redis:
    image: redis:7-alpine
    container_name: procos-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - procos-network

  # Ollama - Local LLM inference server for AI worker (CPU mode)
  ollama:
    image: ollama/ollama:latest
    container_name: procos-ollama
    ports:
      - "11434:11434"  # Ollama API port
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_KEEP_ALIVE=24h
      - OLLAMA_HOST=0.0.0.0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - procos-network
    restart: unless-stopped

  # PostgreSQL - Persistent data storage (optional, for production)
  postgres:
    image: postgres:15-alpine
    container_name: procos-postgres
    environment:
      - POSTGRES_DB=procos
      - POSTGRES_USER=procos
      - POSTGRES_PASSWORD=procos123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U procos"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - procos-network
    # PostgreSQL now required for persistent storage

volumes:
  rabbitmq_data:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  ollama_data:
    driver: local

networks:
  procos-network:
    driver: bridge
    name: procos-network

# ProcOS Infrastructure Stack
# PostgreSQL now required for persistent process data storage
# To start: docker-compose up -d
# To stop: docker-compose down